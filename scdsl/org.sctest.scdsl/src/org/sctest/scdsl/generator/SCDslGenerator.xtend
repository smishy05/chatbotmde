/*
 * generated by Xtext 2.22.0
 * «»
 */
package org.sctest.scdsl.generator

import java.lang.Object
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.sctest.scdsl.sCDsl.SContract
import org.sctest.scdsl.sCDsl.Participant
import org.sctest.scdsl.sCDsl.Asset
import org.sctest.scdsl.sCDsl.Transaction
import org.sctest.scdsl.sCDsl.TranRel
import org.sctest.scdsl.sCDsl.AssetRel
import org.sctest.scdsl.sCDsl.Relationship

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SCDslGenerator extends AbstractGenerator {
	
	String participant = "";
	String asset = "";
	String transaction = "";
	String tranrel = "";
	String assetrel = "";
	String rel = "";
	
	

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (s : resource.allContents.filter(SContract).toIterable) {
			if(s.platform.toString() == "IBM"){
				for (a : resource.allContents.filter(Asset).toIterable)
				{
					for (par : a.parameters)
					{
						if(par.identifier == true){
							asset = asset + "asset " + a.name.substring(0, 1).toUpperCase() + a.name.substring(1) + " identified by " + par.name + " {\n" 
						}	
					}
					for (par : a.parameters)
					{
						asset = asset + "o " + 	par.type.substring(0, 1).toUpperCase() + par.type.substring(1) + " " + par.name + "\n"
					}
					asset = asset + "}\n"
				}
				for (p : resource.allContents.filter(Participant).toIterable)
				{
//					participant = participant + "Participant " + p.name + "\n";
					for (par : p.parameters)
					{
//						participant = participant + par.identifier.toString();
						if(par.identifier == true)
						{
							participant = participant + "participant " + p.name.substring(0, 1).toUpperCase() + p.name.substring(1) + " identified by " + par.name 
							+ "{\n"
						}
					}
					for (par : p.parameters)
					{
						participant = participant + "o " + par.type.substring(0, 1).toUpperCase() + par.type.substring(1) + " " + par.name + "\n"
					}
					participant = participant + "}\n"
				}
				for (t : resource.allContents.filter(Transaction).toIterable)
				{
					transaction = transaction + "transaction " + t.name.substring(0, 1).toUpperCase() + t.name.substring(1) + " {\n"
					for (r : resource.allContents.filter(TranRel).toIterable)
					{
						transaction = transaction + "--> " + r.from.name.substring(0, 1).toUpperCase() + r.name.toString().substring(1) + " " 
						+ r.from.name.toLowerCase() + "\n"
						transaction = transaction + "--> " + r.to.name.substring(0, 1).toUpperCase() + r.to.name.substring(1) + " " 
						+ r.to.name.toLowerCase() + "\n"
					}
					transaction = transaction + "}\n";
				}
				fsa.generateFile(s.name+'.cto', generateCodeIBM(s))
			}
			else
			{
				if(s.platform.toString() == "Azure"){
					for(p : resource.allContents.filter(Participant).toIterable)
					{
						participant = participant + "{ \n" + "\"Name\": " + p.name.substring(0, 1).toUpperCase() + p.name.substring(1) 
						+ "\n" + "\"Description\": \"...\"" + "\n},\n" 
					}
					for(trel : resource.allContents.filter(TranRel).toIterable)
					{
						tranrel = tranrel + trel
					}
					fsa.generateFile(s.name+'.json', generateCodeAzure(s))
				}
				else
				{
					for (p : resource.allContents.filter(Participant).toIterable)
					{
						participant = participant + "struct " + p.name.substring(0, 1).toUpperCase() + p.name.substring(1) + '{\n'
						for (par : p.parameters)
						{
							if(par.type.toLowerCase() == 'string')
							{
								participant = participant + "bytes32 " + par.name + ";\n"
							}
							else
							{
								participant = participant + par.type + " " + par.name + ";\n"
							}
						}
						participant = participant + "address " + p.name.toLowerCase() + "Address;\n } \n"
					}
					for (a : resource.allContents.filter(Asset).toIterable)
					{
						for(par : a.parameters)
						{
							asset = asset + par.type + " public " + par.name + ";\n"
						}
					}
//					for (tr : resource.allContents.filter(Transaction).toIterable)
//					{
//						transaction = transaction + " public " + tr.name + ";\n";
//					}
					for (trel : resource.allContents.filter(TranRel).toIterable)
					{
						tranrel = "modifier only" + trel.name + " {\n" + "require( msg.sender == " + trel.name.substring(0, 1).toUpperCase() + trel.name.substring(1) 
						+ "." + trel.name.toLowerCase() + "Address);\n_;\n}" 
					}
					fsa.generateFile(s.name+'.sol', generateCodeSolidity(s))
				}
			}
		}
	}
	
	private def generateCodeIBM(SContract s) 
	{
		val elelist = newArrayList (tranrel, participant, asset, transaction);
		'''
		namespace «s.name.replaceAll(" ", "_")»
		«FOR el : elelist»
			«el»
		«ENDFOR»
		'''
	}
	
	private def generateCodeAzure(SContract s)
	{
		val elelist1 = newArrayList (participant);
		val elelist2 = newArrayList (tranrel);
		'''
		{
			"ApplicationName": "«s.name.replaceAll(" ", "")»",
			"DisplayName": "«s.name»",
			"Description": "...",
			"ApplicationRoles": 
			[
				«FOR el1 : elelist1»
					«el1»
				«ENDFOR»
			],
			"Workflows":
			[
				«FOR el2 : elelist2»
					«el2»
				«ENDFOR»
			],
			"States":
			[
				{
					"Name": "",
				    "DisplayName": "",
				    "Description": "...",
				    "PercentComplete": ,
				    "Value": ,
				    "Style": "",
				    "Transitions": ['[]'/]
				}
			]
		}
		'''
	}
	
	private def generateCodeSolidity(SContract s) 
	{
		val elelist = newArrayList (participant, asset, transaction, tranrel);
		'''
		pragma solidity >=0.4.22 <0.7.0;
	
		contract «s.name.replaceAll(" ", "_")»{
			constructor(){
				
			}
			«FOR el : elelist»
				«el»
			«ENDFOR»
		
		}
		'''
	}
}